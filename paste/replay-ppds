#!/usr/bin/env jruby -E windows-1250
%w{optparse json net/http uri time fileutils}.each { |e| require e }

# Usage:
# ruby ./replay -h pp-data-service.bsf -t 16 -m 200 [file...] # replays iMDB ratings with default whitespace record separator.
# NOTE: breaking and re-running replay script for the same files resumes previous sessions from the last checkpoint file(s).

def parse_options!(options = {})
  OptionParser.new do |p|
    p.on("-b", "--backoff INTEGER", Integer, "initial backoff millis (default: 20).") { |v| options[:backoff_millis] = v } 
    p.on('-d', '--debug INTEGER', Integer, 'number of DEBUG messages (default : 2).') { |v| options[:debug] = v }
    p.on("-h", "--hostname STRING", String, "required hostname.") { |v| options[:hostname] = v }
    p.on("-m", "--max-tps FLOAT", Float, "max number of transactions/second (default: 200).") { |v| options[:tps] = v } 
    p.on("-t", "--threads INTEGER", Integer, "number of threads (default: 16).") { |v| options[:threads] = v }
  end.parse!
  options
end

def run!
  options = parse_options!
  fail "Missing required --hostname option, e.g. -h pp-data-service.integ" unless hostname = options[:hostname]
  hostname = (hostname.split('.') + `hostname`.chomp.split('.')[-2, 2]).join('.') if hostname.count('.') < 2
  backoff_millis = options[:backoff_millis] || 20
  max_tps = options[:tps] || 200
  https = (options[:threads] || 16).times.map { Net::HTTP.new(hostname, 80) }
  debug = 2.times.map { options[:debug] || 1 }
  
  trans = 0
  trans_in_log_interval = 25
  trans_in_chk_interval = 100
  begin_time = Time.now

  fname = nil
  until ARGF.filename && ARGF.eof? do
    unless ARGF.filename.eql?(fname)
      lineno = fetch_checkpoint_record(ARGF)
      ARGF.gets until lineno.nil? || lineno == ARGF.lineno + 1 || ARGF.eof?
      puts "begins replays at #{ARGF.filename}:#{ARGF.lineno + 1} at #{begin_time}."
      next if ARGF.eof?
      fname = ARGF.filename
    end

    lines = https.reduce([]) { |r, _| 2 * https.size.times { r << ARGF.gets.chomp unless ARGF.eof? }; r }
    exit -1 unless try_replay_in_parallel(https, lines, backoff_millis, debug)
    trans += lines.length
    elapsed_time = Time.now - begin_time
    puts "Line #{ARGF.lineno} (#{'%.2f' % (trans/elapsed_time)} tps): #{lines[-1]}" if between(trans, lines, trans_in_log_interval)
    store_checkpoint_record(ARGF) if between(trans, lines, trans_in_chk_interval)
    sleep_second = (trans / max_tps) - elapsed_time
    sleep sleep_second if sleep_second > 0
  end
  store_checkpoint_record(ARGF)
  puts "ends replays at #{ARGF.filename}:#{ARGF.lineno + 1} at #{Time.now}."
end

def try_replay_in_parallel(https, lines, backoff_millis, debug, n = (lines.size + https.size - 1)/https.size)
  lines.each_slice(n).each_with_index.map do |e, i|
    Thread.new { try_replay(https[i], e, backoff_millis, debug) }.value 
  end.flatten.all?
end

def try_replay(http, lines, backoff_millis, debug)
  lines.map do |l|
    (0..m = 7).each do |k| # max replay attempts (8)
      begin
        res = replay_ppds(http, l, debug)
        break true if res.kind_of?(Net::HTTPSuccess) && (res.body.empty? || /^Successfully/ =~ res.body)
        puts "Failed to process a line: #{l}", res.body if m == k
      rescue
        puts "Failed to process a line: #{l}", $!.inspect, $@
        sleep 2 ** k * backoff_millis / 1000.0
        next
      end
    end
  end
end

def replay_ppds(http, line, debug, app_id = 11510)
  dt, uid, title_id, rating = line.split # 2013-06-01T00:00:00.053Z  ur34164904  tt1706601   9
  uid, rating = [uid.delete('^0-9'), rating].map { |e| e.to_i }
  if 0 == rating
    get = '/exec/rest/?a=%s&i=%s&m=%s&u=%s' % [app_id, title_id, 'deleteRatingNumeric', uid]
    puts "[DEBUG] GET at #{http.address}#{get}" if (debug[0] -= 1) >= 0
    http.request(Net::HTTP::Get.new(get))
  else
    ms = DateTime.parse(dt).strftime('%s')
    get = '/exec/rest/?a=%s&e=%s&i=%s&m=%s&n=%s&u=%s' % [app_id, ms, title_id, 'addRatingNumeric', rating, uid]
    puts "[DEBUG] GET at #{http.address}#{get}" if (debug[1] -= 1) >= 0
    http.request(Net::HTTP::Get.new(get))
  end
end

def replay_proxy(http, line, debug, p13_type = 'r', mkt_id = 136750, rating_type = 'n')
  dt, uid, title_id, rating = line.split # 2013-06-01T00:00:00.053Z  ur34164904  tt1706601   9
  uid, rating = [uid.delete('^0-9'), rating].map { |e| e.to_i }
  if 0 == rating
    del = '/%s/%s/%s/%s/%s' % [p13_type, mkt_id, uid, rating_type, title_id]
    puts "[DEBUG] DELETE at #{http.address}#{del}" if (debug[0] -= 1) >= 0
    http.request(Net::HTTP::Delete.new(del))
  else
    ms = DateTime.parse(dt).strftime('%Q')
    put = '/%s/%s/%s/%s/%s/%s/%s' % [p13_type, mkt_id, uid, rating_type, title_id, ms, rating]
    puts "[DEBUG] PUT at #{http.address}#{put}" if (debug[1] -= 1) >= 0
    http.request(Net::HTTP::Put.new(put))
  end
end

def fetch_checkpoint_record(argf, ext = File.extname(argf.filename))
  chk_file = argf.filename.chomp(ext) + '.chk'
  if File.exist? chk_file
    chk = open(chk_file) { |f| Marshal.load f }
    chk[1].to_i if File.mtime(argf.filename) <= chk[0]
  end
end

def store_checkpoint_record(argf, ext = File.extname(argf.filename))
  tmp_file = '/tmp/' + File.basename(argf.filename).chomp(ext) + '.tmp'
  chk_file = argf.filename.chomp(ext) + '.chk'
  open(tmp_file, 'w') do |chk|
    Marshal.dump [File.mtime(argf.filename), (argf.lineno + 1).to_s], chk
  end
  FileUtils.mv tmp_file, chk_file, :force => true
end

def between(trans, lines, interval)
  trans % interval + lines.length >= interval
end

run! if __FILE__==$0
